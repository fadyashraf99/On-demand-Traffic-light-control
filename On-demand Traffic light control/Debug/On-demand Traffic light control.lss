
On-demand Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b30  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000ba4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000ba4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ba4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000130e  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ac  00000000  00000000  0000206e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b8d  00000000  00000000  0000291a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  000034a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000549  00000000  00000000  00003734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000817  00000000  00000000  00003c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004494  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <main>
  74:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:
//this function takes void and return void
//it contains all initialization functions that will be used in the project
//it will be used only 1 time
void APP_init(void)
{
	LED_init();
  7c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_init>
	BUTTON_init();
  80:	0e 94 77 01 	call	0x2ee	; 0x2ee <BUTTON_init>
	TIMER_init();
  84:	0e 94 70 03 	call	0x6e0	; 0x6e0 <TIMER_init>
	INT0_init();
  88:	0e 94 65 03 	call	0x6ca	; 0x6ca <INT0_init>
  8c:	08 95       	ret

0000008e <APP_start>:
}

//this function takes void and return void
//it contains how the program works and assemble all the functions
void APP_start(void)
{
  8e:	cf 93       	push	r28
  90:	df 93       	push	r29
	while(1)
	{
		if (mode == NORMAL_MODE)	//	for no pedestrian button press
  92:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <mode>
  96:	81 11       	cpse	r24, r1
  98:	7b c0       	rjmp	.+246    	; 0x190 <APP_start+0x102>
		{
			/*	first state	*/
			LED_on(PEDESTRIAN_RED_LED_PORT, PEDESTRIAN_RED_LED_PIN);
  9a:	62 e0       	ldi	r22, 0x02	; 2
  9c:	82 e4       	ldi	r24, 0x42	; 66
  9e:	0e 94 9c 01 	call	0x338	; 0x338 <LED_on>
			LED_on(CAR_GREEN_LED_PORT, CAR_GREEN_LED_PIN);
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	81 e4       	ldi	r24, 0x41	; 65
  a6:	0e 94 9c 01 	call	0x338	; 0x338 <LED_on>
			TIMER_delay(5000);
  aa:	68 e8       	ldi	r22, 0x88	; 136
  ac:	73 e1       	ldi	r23, 0x13	; 19
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 87 03 	call	0x70e	; 0x70e <TIMER_delay>
			if (intFlagIn)	//if interrupt happened this will reset the program to its first state
  b6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <intFlagIn>
  ba:	88 23       	and	r24, r24
  bc:	b9 f0       	breq	.+46     	; 0xec <APP_start+0x5e>
			{
				intFlagIn = 0;
  be:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <intFlagIn>
				continue;
  c2:	e7 cf       	rjmp	.-50     	; 0x92 <APP_start+0x4>
			}
			
			/*	second state	*/
			for (int i=0; i<10; i++)	//loop to blink LED for 5 seconds as delay is 0.5 seconds for 10 times to change state faster ans keep the total delay time
			{
				yellowFlag = 1;
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <yellowFlag>
				LED_blink(CAR_YELLOW_LED_PORT, CAR_YELLOW_LED_PIN, 500);
  ca:	24 ef       	ldi	r18, 0xF4	; 244
  cc:	31 e0       	ldi	r19, 0x01	; 1
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	61 e0       	ldi	r22, 0x01	; 1
  d4:	81 e4       	ldi	r24, 0x41	; 65
  d6:	0e 94 a7 01 	call	0x34e	; 0x34e <LED_blink>
				if (intFlagIn)	//if interrupt happened this will reset the flag of yellow LED 
  da:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <intFlagIn>
  de:	88 23       	and	r24, r24
  e0:	19 f0       	breq	.+6      	; 0xe8 <APP_start+0x5a>
				{
					yellowFlag = 0;
  e2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <yellowFlag>
					break;
  e6:	07 c0       	rjmp	.+14     	; 0xf6 <APP_start+0x68>
				intFlagIn = 0;
				continue;
			}
			
			/*	second state	*/
			for (int i=0; i<10; i++)	//loop to blink LED for 5 seconds as delay is 0.5 seconds for 10 times to change state faster ans keep the total delay time
  e8:	21 96       	adiw	r28, 0x01	; 1
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <APP_start+0x62>
  ec:	c0 e0       	ldi	r28, 0x00	; 0
  ee:	d0 e0       	ldi	r29, 0x00	; 0
  f0:	ca 30       	cpi	r28, 0x0A	; 10
  f2:	d1 05       	cpc	r29, r1
  f4:	3c f3       	brlt	.-50     	; 0xc4 <APP_start+0x36>
				{
					yellowFlag = 0;
					break;
				}
			}
			if (intFlagIn)	//if interrupt happened this will reset the program to its first state
  f6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <intFlagIn>
  fa:	88 23       	and	r24, r24
  fc:	19 f0       	breq	.+6      	; 0x104 <APP_start+0x76>
			{
				intFlagIn = 0;
  fe:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <intFlagIn>
				continue;
 102:	c7 cf       	rjmp	.-114    	; 0x92 <APP_start+0x4>
			}
			yellowFlag = 0;	//flag that indicate that the loop of yellow blink is finished
 104:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <yellowFlag>
			
			/*	third state	*/
			LED_off(CAR_GREEN_LED_PORT, CAR_GREEN_LED_PIN);
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	81 e4       	ldi	r24, 0x41	; 65
 10c:	0e 94 a0 01 	call	0x340	; 0x340 <LED_off>
			LED_off(CAR_YELLOW_LED_PORT, CAR_YELLOW_LED_PIN);
 110:	61 e0       	ldi	r22, 0x01	; 1
 112:	81 e4       	ldi	r24, 0x41	; 65
 114:	0e 94 a0 01 	call	0x340	; 0x340 <LED_off>
			LED_on(CAR_RED_LED_PORT, CAR_RED_LED_PIN);
 118:	62 e0       	ldi	r22, 0x02	; 2
 11a:	81 e4       	ldi	r24, 0x41	; 65
 11c:	0e 94 9c 01 	call	0x338	; 0x338 <LED_on>
			TIMER_delay(5000);
 120:	68 e8       	ldi	r22, 0x88	; 136
 122:	73 e1       	ldi	r23, 0x13	; 19
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 87 03 	call	0x70e	; 0x70e <TIMER_delay>
			if (intFlagIn)
 12c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <intFlagIn>
 130:	88 23       	and	r24, r24
 132:	b9 f0       	breq	.+46     	; 0x162 <APP_start+0xd4>
			{
				intFlagIn = 0;
 134:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <intFlagIn>
				continue;
 138:	ac cf       	rjmp	.-168    	; 0x92 <APP_start+0x4>
			}
			/*	fourth state	*/
			for (int i=0; i<10; i++)
			{
				yellowFlag = 1;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <yellowFlag>
				LED_blink(CAR_YELLOW_LED_PORT, CAR_YELLOW_LED_PIN, 500);
 140:	24 ef       	ldi	r18, 0xF4	; 244
 142:	31 e0       	ldi	r19, 0x01	; 1
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	50 e0       	ldi	r21, 0x00	; 0
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	81 e4       	ldi	r24, 0x41	; 65
 14c:	0e 94 a7 01 	call	0x34e	; 0x34e <LED_blink>
				if (intFlagIn)
 150:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <intFlagIn>
 154:	88 23       	and	r24, r24
 156:	19 f0       	breq	.+6      	; 0x15e <APP_start+0xd0>
				{
					yellowFlag = 0;
 158:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <yellowFlag>
					break;
 15c:	07 c0       	rjmp	.+14     	; 0x16c <APP_start+0xde>
			{
				intFlagIn = 0;
				continue;
			}
			/*	fourth state	*/
			for (int i=0; i<10; i++)
 15e:	21 96       	adiw	r28, 0x01	; 1
 160:	02 c0       	rjmp	.+4      	; 0x166 <APP_start+0xd8>
 162:	c0 e0       	ldi	r28, 0x00	; 0
 164:	d0 e0       	ldi	r29, 0x00	; 0
 166:	ca 30       	cpi	r28, 0x0A	; 10
 168:	d1 05       	cpc	r29, r1
 16a:	3c f3       	brlt	.-50     	; 0x13a <APP_start+0xac>
				{
					yellowFlag = 0;
					break;
				}
			}
			if (intFlagIn)
 16c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <intFlagIn>
 170:	88 23       	and	r24, r24
 172:	19 f0       	breq	.+6      	; 0x17a <APP_start+0xec>
			{
				intFlagIn = 0;
 174:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <intFlagIn>
				continue;
 178:	8c cf       	rjmp	.-232    	; 0x92 <APP_start+0x4>
			}
			yellowFlag = 0;
 17a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <yellowFlag>
			LED_off(CAR_YELLOW_LED_PORT, CAR_YELLOW_LED_PIN);
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	81 e4       	ldi	r24, 0x41	; 65
 182:	0e 94 a0 01 	call	0x340	; 0x340 <LED_off>
			LED_off(CAR_RED_LED_PORT, CAR_RED_LED_PIN);
 186:	62 e0       	ldi	r22, 0x02	; 2
 188:	81 e4       	ldi	r24, 0x41	; 65
 18a:	0e 94 a0 01 	call	0x340	; 0x340 <LED_off>
 18e:	81 cf       	rjmp	.-254    	; 0x92 <APP_start+0x4>
		}
		
		
		else if (mode == PEDESTRIAN_MODE)	//for pedestrian mode after pressing the button
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	09 f0       	breq	.+2      	; 0x196 <APP_start+0x108>
 194:	7e cf       	rjmp	.-260    	; 0x92 <APP_start+0x4>
		{
			/*	initial state	*/
			LED_off(CAR_YELLOW_LED_PORT, CAR_YELLOW_LED_PIN);
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	81 e4       	ldi	r24, 0x41	; 65
 19a:	0e 94 a0 01 	call	0x340	; 0x340 <LED_off>
			if (LED_read(CAR_RED_LED_PORT, CAR_RED_LED_PIN))	//checks which state the interrupt occurs which will be when the CARs red LED is on
 19e:	62 e0       	ldi	r22, 0x02	; 2
 1a0:	81 e4       	ldi	r24, 0x41	; 65
 1a2:	0e 94 b8 01 	call	0x370	; 0x370 <LED_read>
 1a6:	88 23       	and	r24, r24
 1a8:	99 f0       	breq	.+38     	; 0x1d0 <APP_start+0x142>
			{
				/*	first state	*/
				LED_off(PEDESTRIAN_RED_LED_PORT, PEDESTRIAN_RED_LED_PIN);
 1aa:	62 e0       	ldi	r22, 0x02	; 2
 1ac:	82 e4       	ldi	r24, 0x42	; 66
 1ae:	0e 94 a0 01 	call	0x340	; 0x340 <LED_off>
				LED_on(CAR_RED_LED_PORT, CAR_RED_LED_PIN);
 1b2:	62 e0       	ldi	r22, 0x02	; 2
 1b4:	81 e4       	ldi	r24, 0x41	; 65
 1b6:	0e 94 9c 01 	call	0x338	; 0x338 <LED_on>
				LED_on(PEDESTRIAN_GREEN_LED_PORT, PEDESTRIAN_GREEN_LED_PIN);
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	82 e4       	ldi	r24, 0x42	; 66
 1be:	0e 94 9c 01 	call	0x338	; 0x338 <LED_on>
				TIMER_delay(5000);
 1c2:	68 e8       	ldi	r22, 0x88	; 136
 1c4:	73 e1       	ldi	r23, 0x13	; 19
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 87 03 	call	0x70e	; 0x70e <TIMER_delay>
 1ce:	39 c0       	rjmp	.+114    	; 0x242 <APP_start+0x1b4>
			}
			else if (LED_read(CAR_GREEN_LED_PORT, CAR_GREEN_LED_PIN) || yellowFlag)	//checks which state the interrupt occur which will be when the CARs green LED is on or when yellow light blink
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	81 e4       	ldi	r24, 0x41	; 65
 1d4:	0e 94 b8 01 	call	0x370	; 0x370 <LED_read>
 1d8:	81 11       	cpse	r24, r1
 1da:	04 c0       	rjmp	.+8      	; 0x1e4 <APP_start+0x156>
 1dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <yellowFlag>
 1e0:	88 23       	and	r24, r24
 1e2:	79 f1       	breq	.+94     	; 0x242 <APP_start+0x1b4>
			{
				/*	first state	*/
				LED_off(CAR_YELLOW_LED_PORT, CAR_YELLOW_LED_PIN);
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	81 e4       	ldi	r24, 0x41	; 65
 1e8:	0e 94 a0 01 	call	0x340	; 0x340 <LED_off>
				for (int i=0; i<10; i++)	//loop to blink 2 LED for 5 seconds as delay is 0.5 seconds for 10 times to change state faster ans keep the total delay time
 1ec:	c0 e0       	ldi	r28, 0x00	; 0
 1ee:	d0 e0       	ldi	r29, 0x00	; 0
 1f0:	07 c0       	rjmp	.+14     	; 0x200 <APP_start+0x172>
				{
					LED_blink_both(500);
 1f2:	64 ef       	ldi	r22, 0xF4	; 244
 1f4:	71 e0       	ldi	r23, 0x01	; 1
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 bb 01 	call	0x376	; 0x376 <LED_blink_both>
			}
			else if (LED_read(CAR_GREEN_LED_PORT, CAR_GREEN_LED_PIN) || yellowFlag)	//checks which state the interrupt occur which will be when the CARs green LED is on or when yellow light blink
			{
				/*	first state	*/
				LED_off(CAR_YELLOW_LED_PORT, CAR_YELLOW_LED_PIN);
				for (int i=0; i<10; i++)	//loop to blink 2 LED for 5 seconds as delay is 0.5 seconds for 10 times to change state faster ans keep the total delay time
 1fe:	21 96       	adiw	r28, 0x01	; 1
 200:	ca 30       	cpi	r28, 0x0A	; 10
 202:	d1 05       	cpc	r29, r1
 204:	b4 f3       	brlt	.-20     	; 0x1f2 <APP_start+0x164>
				{
					LED_blink_both(500);
				}
				/*	second state	*/
				LED_off(PEDESTRIAN_RED_LED_PORT, PEDESTRIAN_RED_LED_PIN);
 206:	62 e0       	ldi	r22, 0x02	; 2
 208:	82 e4       	ldi	r24, 0x42	; 66
 20a:	0e 94 a0 01 	call	0x340	; 0x340 <LED_off>
				LED_off(CAR_GREEN_LED_PORT, CAR_GREEN_LED_PIN);
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	81 e4       	ldi	r24, 0x41	; 65
 212:	0e 94 a0 01 	call	0x340	; 0x340 <LED_off>
				LED_off(CAR_YELLOW_LED_PORT, CAR_YELLOW_LED_PIN);
 216:	61 e0       	ldi	r22, 0x01	; 1
 218:	81 e4       	ldi	r24, 0x41	; 65
 21a:	0e 94 a0 01 	call	0x340	; 0x340 <LED_off>
				LED_off(PEDESTRIAN_YELLOW_LED_PORT, PEDESTRIAN_YELLOW_LED_PIN);
 21e:	61 e0       	ldi	r22, 0x01	; 1
 220:	82 e4       	ldi	r24, 0x42	; 66
 222:	0e 94 a0 01 	call	0x340	; 0x340 <LED_off>
				LED_on(CAR_RED_LED_PORT, CAR_RED_LED_PIN);
 226:	62 e0       	ldi	r22, 0x02	; 2
 228:	81 e4       	ldi	r24, 0x41	; 65
 22a:	0e 94 9c 01 	call	0x338	; 0x338 <LED_on>
				LED_on(PEDESTRIAN_GREEN_LED_PORT, PEDESTRIAN_GREEN_LED_PIN);
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	82 e4       	ldi	r24, 0x42	; 66
 232:	0e 94 9c 01 	call	0x338	; 0x338 <LED_on>
				TIMER_delay(5000);
 236:	68 e8       	ldi	r22, 0x88	; 136
 238:	73 e1       	ldi	r23, 0x13	; 19
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 87 03 	call	0x70e	; 0x70e <TIMER_delay>
			}
			/*	last state	*/
			LED_on(CAR_RED_LED_PORT, CAR_RED_LED_PIN);
 242:	62 e0       	ldi	r22, 0x02	; 2
 244:	81 e4       	ldi	r24, 0x41	; 65
 246:	0e 94 9c 01 	call	0x338	; 0x338 <LED_on>
			LED_on(PEDESTRIAN_GREEN_LED_PORT, PEDESTRIAN_GREEN_LED_PIN);
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	82 e4       	ldi	r24, 0x42	; 66
 24e:	0e 94 9c 01 	call	0x338	; 0x338 <LED_on>
			for (int i=0; i<10; i++)	//loop to blink 2 LED for 5 seconds as delay is 0.5 seconds for 10 times to change state faster ans keep the total delay time
 252:	c0 e0       	ldi	r28, 0x00	; 0
 254:	d0 e0       	ldi	r29, 0x00	; 0
 256:	07 c0       	rjmp	.+14     	; 0x266 <APP_start+0x1d8>
			{
				LED_blink_both(500);
 258:	64 ef       	ldi	r22, 0xF4	; 244
 25a:	71 e0       	ldi	r23, 0x01	; 1
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 bb 01 	call	0x376	; 0x376 <LED_blink_both>
				TIMER_delay(5000);
			}
			/*	last state	*/
			LED_on(CAR_RED_LED_PORT, CAR_RED_LED_PIN);
			LED_on(PEDESTRIAN_GREEN_LED_PORT, PEDESTRIAN_GREEN_LED_PIN);
			for (int i=0; i<10; i++)	//loop to blink 2 LED for 5 seconds as delay is 0.5 seconds for 10 times to change state faster ans keep the total delay time
 264:	21 96       	adiw	r28, 0x01	; 1
 266:	ca 30       	cpi	r28, 0x0A	; 10
 268:	d1 05       	cpc	r29, r1
 26a:	b4 f3       	brlt	.-20     	; 0x258 <APP_start+0x1ca>
			{
				LED_blink_both(500);
			}
			LED_off(CAR_RED_LED_PORT, CAR_RED_LED_PIN);
 26c:	62 e0       	ldi	r22, 0x02	; 2
 26e:	81 e4       	ldi	r24, 0x41	; 65
 270:	0e 94 a0 01 	call	0x340	; 0x340 <LED_off>
			LED_off(PEDESTRIAN_GREEN_LED_PORT, PEDESTRIAN_GREEN_LED_PIN);
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	82 e4       	ldi	r24, 0x42	; 66
 278:	0e 94 a0 01 	call	0x340	; 0x340 <LED_off>
			LED_off(CAR_YELLOW_LED_PORT, CAR_YELLOW_LED_PIN);
 27c:	61 e0       	ldi	r22, 0x01	; 1
 27e:	81 e4       	ldi	r24, 0x41	; 65
 280:	0e 94 a0 01 	call	0x340	; 0x340 <LED_off>
			LED_off(PEDESTRIAN_YELLOW_LED_PORT, PEDESTRIAN_YELLOW_LED_PIN);
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	82 e4       	ldi	r24, 0x42	; 66
 288:	0e 94 a0 01 	call	0x340	; 0x340 <LED_off>
			initFlag = 1;			//set flag in program to indicate that there is an interrupt happened
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			intFlagIn = 1;			//set flag in timer to indicate that there is an interrupt happened
 292:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <intFlagIn>
			mode = NORMAL_MODE;
 296:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <mode>
			return;	//to exit from loop and exit the interrupt and return to the main program
		}
	}
}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <__vector_1>:

ISR(EXT_INT_0)	//when the button is pressed
{
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	2f 93       	push	r18
 2ac:	3f 93       	push	r19
 2ae:	4f 93       	push	r20
 2b0:	5f 93       	push	r21
 2b2:	6f 93       	push	r22
 2b4:	7f 93       	push	r23
 2b6:	8f 93       	push	r24
 2b8:	9f 93       	push	r25
 2ba:	af 93       	push	r26
 2bc:	bf 93       	push	r27
 2be:	ef 93       	push	r30
 2c0:	ff 93       	push	r31
	mode = PEDESTRIAN_MODE;	//set different mode
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <mode>
	APP_start();			//go to function with pedestrian mode activated
 2c8:	0e 94 47 00 	call	0x8e	; 0x8e <APP_start>
 2cc:	ff 91       	pop	r31
 2ce:	ef 91       	pop	r30
 2d0:	bf 91       	pop	r27
 2d2:	af 91       	pop	r26
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	7f 91       	pop	r23
 2da:	6f 91       	pop	r22
 2dc:	5f 91       	pop	r21
 2de:	4f 91       	pop	r20
 2e0:	3f 91       	pop	r19
 2e2:	2f 91       	pop	r18
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <BUTTON_init>:

//This function takes void and return void and sets button configuration
//it sets the pin as an input which will be used by the button which will be an external interrupt pin
void BUTTON_init(void) // button is input device
{
	DIO_init(EXTERNAL_INT0_BUTTON_PORT, EXTERNAL_INT0_BUTTON_PIN, IN);
 2ee:	40 e0       	ldi	r20, 0x00	; 0
 2f0:	62 e0       	ldi	r22, 0x02	; 2
 2f2:	84 e4       	ldi	r24, 0x44	; 68
 2f4:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <DIO_init>
 2f8:	08 95       	ret

000002fa <LED_init>:

//This function takes void and return void and sets LED configuration
//it sets the pin as an output which will be used as an indication in the program
void LED_init(void)
{
	DIO_init(CAR_GREEN_LED_PORT, CAR_GREEN_LED_PIN, OUT);
 2fa:	41 e0       	ldi	r20, 0x01	; 1
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	81 e4       	ldi	r24, 0x41	; 65
 300:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <DIO_init>
	DIO_init(CAR_YELLOW_LED_PORT, CAR_YELLOW_LED_PIN, OUT);
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	81 e4       	ldi	r24, 0x41	; 65
 30a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <DIO_init>
	DIO_init(CAR_RED_LED_PORT, CAR_RED_LED_PIN, OUT);
 30e:	41 e0       	ldi	r20, 0x01	; 1
 310:	62 e0       	ldi	r22, 0x02	; 2
 312:	81 e4       	ldi	r24, 0x41	; 65
 314:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <DIO_init>
	
	DIO_init(PEDESTRIAN_GREEN_LED_PORT, PEDESTRIAN_GREEN_LED_PIN, OUT);
 318:	41 e0       	ldi	r20, 0x01	; 1
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	82 e4       	ldi	r24, 0x42	; 66
 31e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <DIO_init>
	DIO_init(PEDESTRIAN_YELLOW_LED_PORT, PEDESTRIAN_YELLOW_LED_PIN, OUT);
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	82 e4       	ldi	r24, 0x42	; 66
 328:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <DIO_init>
	DIO_init(PEDESTRIAN_RED_LED_PORT, PEDESTRIAN_RED_LED_PIN, OUT);
 32c:	41 e0       	ldi	r20, 0x01	; 1
 32e:	62 e0       	ldi	r22, 0x02	; 2
 330:	82 e4       	ldi	r24, 0x42	; 66
 332:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <DIO_init>
 336:	08 95       	ret

00000338 <LED_on>:

//This function takes led port and led pin and return void
//it sets the state to high
void LED_on(uint8_t ledPort, uint8_t ledPin)
{
	DIO_write(ledPort, ledPin, HIGH);
 338:	41 e0       	ldi	r20, 0x01	; 1
 33a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <DIO_write>
 33e:	08 95       	ret

00000340 <LED_off>:

//This function takes led port and led pin and return void
//it sets the state to low
void LED_off(uint8_t ledPort, uint8_t ledPin)
{
	DIO_write(ledPort, ledPin, LOW);
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	0e 94 53 02 	call	0x4a6	; 0x4a6 <DIO_write>
 346:	08 95       	ret

00000348 <LED_toggle>:

//This function takes led port and led pin and return void
//it toggles the state of the pin from high to low and vice versa
void LED_toggle(uint8_t ledPort, uint8_t ledPin)
{
	DIO_toggle(ledPort, ledPin);
 348:	0e 94 cd 02 	call	0x59a	; 0x59a <DIO_toggle>
 34c:	08 95       	ret

0000034e <LED_blink>:
}

//This function takes led port, led pin and the time required for the delay and return void
//it blinks the pin for specific time
void LED_blink(uint8_t ledPort, uint8_t ledPin, uint32_t delayTime)
{
 34e:	cf 92       	push	r12
 350:	df 92       	push	r13
 352:	ef 92       	push	r14
 354:	ff 92       	push	r15
 356:	69 01       	movw	r12, r18
 358:	7a 01       	movw	r14, r20
	DIO_toggle(ledPort, ledPin);
 35a:	0e 94 cd 02 	call	0x59a	; 0x59a <DIO_toggle>
	TIMER_delay(delayTime);
 35e:	c7 01       	movw	r24, r14
 360:	b6 01       	movw	r22, r12
 362:	0e 94 87 03 	call	0x70e	; 0x70e <TIMER_delay>
}
 366:	ff 90       	pop	r15
 368:	ef 90       	pop	r14
 36a:	df 90       	pop	r13
 36c:	cf 90       	pop	r12
 36e:	08 95       	ret

00000370 <LED_read>:

//This function takes led port and led pin and return uint8_t
//it reads the state of the led if its high or low
uint8_t LED_read(uint8_t ledPort, uint8_t ledPin)
{
	return DIO_read(ledPort, ledPin);
 370:	0e 94 04 03 	call	0x608	; 0x608 <DIO_read>
}
 374:	08 95       	ret

00000376 <LED_blink_both>:

//This function takes the time required for delay
//it blinks 2 specific LEDs for specific time
void LED_blink_both(uint32_t delayTime)
{
 376:	cf 92       	push	r12
 378:	df 92       	push	r13
 37a:	ef 92       	push	r14
 37c:	ff 92       	push	r15
 37e:	6b 01       	movw	r12, r22
 380:	7c 01       	movw	r14, r24
	LED_toggle(CAR_YELLOW_LED_PORT, CAR_YELLOW_LED_PIN);
 382:	61 e0       	ldi	r22, 0x01	; 1
 384:	81 e4       	ldi	r24, 0x41	; 65
 386:	0e 94 a4 01 	call	0x348	; 0x348 <LED_toggle>
	LED_toggle(PEDESTRIAN_YELLOW_LED_PORT, PEDESTRIAN_YELLOW_LED_PIN);
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	82 e4       	ldi	r24, 0x42	; 66
 38e:	0e 94 a4 01 	call	0x348	; 0x348 <LED_toggle>
	TIMER_delay(delayTime);
 392:	c7 01       	movw	r24, r14
 394:	b6 01       	movw	r22, r12
 396:	0e 94 87 03 	call	0x70e	; 0x70e <TIMER_delay>
}
 39a:	ff 90       	pop	r15
 39c:	ef 90       	pop	r14
 39e:	df 90       	pop	r13
 3a0:	cf 90       	pop	r12
 3a2:	08 95       	ret

000003a4 <main>:

#include "APPLICATION/app.h"

int main(void)
{
	APP_init(); // initialization function for Drivers
 3a4:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
	APP_start(); // application function which contains system flow
 3a8:	0e 94 47 00 	call	0x8e	; 0x8e <APP_start>
}
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	08 95       	ret

000003b2 <DIO_init>:

//this function takes the number of port and pin and how it acts and return void
//it determine if the pin will be input or output
void DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	switch(portNumber)
 3b2:	82 34       	cpi	r24, 0x42	; 66
 3b4:	31 f1       	breq	.+76     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3b6:	18 f4       	brcc	.+6      	; 0x3be <DIO_init+0xc>
 3b8:	81 34       	cpi	r24, 0x41	; 65
 3ba:	39 f0       	breq	.+14     	; 0x3ca <DIO_init+0x18>
 3bc:	08 95       	ret
 3be:	83 34       	cpi	r24, 0x43	; 67
 3c0:	e1 f1       	breq	.+120    	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 3c2:	84 34       	cpi	r24, 0x44	; 68
 3c4:	09 f4       	brne	.+2      	; 0x3c8 <DIO_init+0x16>
 3c6:	54 c0       	rjmp	.+168    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 3c8:	08 95       	ret
	{
		case PORT_A:
		if (direction == IN)
 3ca:	41 11       	cpse	r20, r1
 3cc:	0c c0       	rjmp	.+24     	; 0x3e6 <DIO_init+0x34>
		{
			CLR_BIT(DDRA, pinNumber); // input
 3ce:	2a b3       	in	r18, 0x1a	; 26
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_init+0x28>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	6a 95       	dec	r22
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_init+0x24>
 3de:	80 95       	com	r24
 3e0:	82 23       	and	r24, r18
 3e2:	8a bb       	out	0x1a, r24	; 26
 3e4:	08 95       	ret
		}
		else if (direction == OUT)
 3e6:	41 30       	cpi	r20, 0x01	; 1
 3e8:	09 f0       	breq	.+2      	; 0x3ec <DIO_init+0x3a>
 3ea:	5c c0       	rjmp	.+184    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
		{
			SET_BIT(DDRA, pinNumber); // output
 3ec:	2a b3       	in	r18, 0x1a	; 26
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_init+0x46>
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	6a 95       	dec	r22
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_init+0x42>
 3fc:	82 2b       	or	r24, r18
 3fe:	8a bb       	out	0x1a, r24	; 26
 400:	08 95       	ret
			//error handling
		}
		break;

		case PORT_B:
		if (direction == IN)
 402:	41 11       	cpse	r20, r1
 404:	0c c0       	rjmp	.+24     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
		{
			CLR_BIT(DDRB, pinNumber); // input
 406:	27 b3       	in	r18, 0x17	; 23
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	6a 95       	dec	r22
 414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	80 95       	com	r24
 418:	82 23       	and	r24, r18
 41a:	87 bb       	out	0x17, r24	; 23
 41c:	08 95       	ret
		}
		else if (direction == OUT)
 41e:	41 30       	cpi	r20, 0x01	; 1
 420:	09 f0       	breq	.+2      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 422:	40 c0       	rjmp	.+128    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
		{
			SET_BIT(DDRB, pinNumber); // output
 424:	27 b3       	in	r18, 0x17	; 23
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	6a 95       	dec	r22
 432:	e2 f7       	brpl	.-8      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 434:	82 2b       	or	r24, r18
 436:	87 bb       	out	0x17, r24	; 23
 438:	08 95       	ret
			//error handling
		}
		break;
		
		case PORT_C:
		if (direction == IN)
 43a:	41 11       	cpse	r20, r1
 43c:	0c c0       	rjmp	.+24     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
		{
			CLR_BIT(DDRC, pinNumber); // input
 43e:	24 b3       	in	r18, 0x14	; 20
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	02 c0       	rjmp	.+4      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	6a 95       	dec	r22
 44c:	e2 f7       	brpl	.-8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 44e:	80 95       	com	r24
 450:	82 23       	and	r24, r18
 452:	84 bb       	out	0x14, r24	; 20
 454:	08 95       	ret
		}
		else if (direction == OUT)
 456:	41 30       	cpi	r20, 0x01	; 1
 458:	29 f5       	brne	.+74     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
		{
			SET_BIT(DDRC, pinNumber); // output
 45a:	24 b3       	in	r18, 0x14	; 20
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	02 c0       	rjmp	.+4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	6a 95       	dec	r22
 468:	e2 f7       	brpl	.-8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 46a:	82 2b       	or	r24, r18
 46c:	84 bb       	out	0x14, r24	; 20
 46e:	08 95       	ret
			//error handling
		}
		break;
		
		case PORT_D:
		if (direction == IN)
 470:	41 11       	cpse	r20, r1
 472:	0c c0       	rjmp	.+24     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
		{
			CLR_BIT(DDRD, pinNumber); // input
 474:	21 b3       	in	r18, 0x11	; 17
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	02 c0       	rjmp	.+4      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	6a 95       	dec	r22
 482:	e2 f7       	brpl	.-8      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 484:	80 95       	com	r24
 486:	82 23       	and	r24, r18
 488:	81 bb       	out	0x11, r24	; 17
 48a:	08 95       	ret
		}
		else if (direction == OUT)
 48c:	41 30       	cpi	r20, 0x01	; 1
 48e:	51 f4       	brne	.+20     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
		{
			SET_BIT(DDRD, pinNumber); // output
 490:	21 b3       	in	r18, 0x11	; 17
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	02 c0       	rjmp	.+4      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	6a 95       	dec	r22
 49e:	e2 f7       	brpl	.-8      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 4a0:	82 2b       	or	r24, r18
 4a2:	81 bb       	out	0x11, r24	; 17
 4a4:	08 95       	ret

000004a6 <DIO_write>:

//this function takes the number of port and pin and its state and return void
//it determine if the output pin will be high or low
void DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t state)
{
	switch(portNumber)
 4a6:	82 34       	cpi	r24, 0x42	; 66
 4a8:	31 f1       	breq	.+76     	; 0x4f6 <DIO_write+0x50>
 4aa:	18 f4       	brcc	.+6      	; 0x4b2 <DIO_write+0xc>
 4ac:	81 34       	cpi	r24, 0x41	; 65
 4ae:	39 f0       	breq	.+14     	; 0x4be <DIO_write+0x18>
 4b0:	08 95       	ret
 4b2:	83 34       	cpi	r24, 0x43	; 67
 4b4:	e1 f1       	breq	.+120    	; 0x52e <DIO_write+0x88>
 4b6:	84 34       	cpi	r24, 0x44	; 68
 4b8:	09 f4       	brne	.+2      	; 0x4bc <DIO_write+0x16>
 4ba:	54 c0       	rjmp	.+168    	; 0x564 <DIO_write+0xbe>
 4bc:	08 95       	ret
	{
		case PORT_A:
		if (state == LOW)
 4be:	41 11       	cpse	r20, r1
 4c0:	0c c0       	rjmp	.+24     	; 0x4da <DIO_write+0x34>
		{
			CLR_BIT(PORTA, pinNumber); // write 0
 4c2:	2b b3       	in	r18, 0x1b	; 27
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_write+0x28>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	6a 95       	dec	r22
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_write+0x24>
 4d2:	80 95       	com	r24
 4d4:	82 23       	and	r24, r18
 4d6:	8b bb       	out	0x1b, r24	; 27
 4d8:	08 95       	ret
		}
		else if (state == OUT)
 4da:	41 30       	cpi	r20, 0x01	; 1
 4dc:	09 f0       	breq	.+2      	; 0x4e0 <DIO_write+0x3a>
 4de:	5c c0       	rjmp	.+184    	; 0x598 <DIO_write+0xf2>
		{
			SET_BIT(PORTA, pinNumber); // write 1
 4e0:	2b b3       	in	r18, 0x1b	; 27
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_write+0x46>
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	6a 95       	dec	r22
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_write+0x42>
 4f0:	82 2b       	or	r24, r18
 4f2:	8b bb       	out	0x1b, r24	; 27
 4f4:	08 95       	ret
			//error handling
		}
		break;

		case PORT_B:
		if (state == LOW)
 4f6:	41 11       	cpse	r20, r1
 4f8:	0c c0       	rjmp	.+24     	; 0x512 <DIO_write+0x6c>
		{
			CLR_BIT(PORTB, pinNumber); // write 0
 4fa:	28 b3       	in	r18, 0x18	; 24
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_write+0x60>
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	6a 95       	dec	r22
 508:	e2 f7       	brpl	.-8      	; 0x502 <DIO_write+0x5c>
 50a:	80 95       	com	r24
 50c:	82 23       	and	r24, r18
 50e:	88 bb       	out	0x18, r24	; 24
 510:	08 95       	ret
		}
		else if (state == OUT)
 512:	41 30       	cpi	r20, 0x01	; 1
 514:	09 f0       	breq	.+2      	; 0x518 <DIO_write+0x72>
 516:	40 c0       	rjmp	.+128    	; 0x598 <DIO_write+0xf2>
		{
			SET_BIT(PORTB, pinNumber); // write 1
 518:	28 b3       	in	r18, 0x18	; 24
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_write+0x7e>
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	6a 95       	dec	r22
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_write+0x7a>
 528:	82 2b       	or	r24, r18
 52a:	88 bb       	out	0x18, r24	; 24
 52c:	08 95       	ret
			//error handling
		}
		break;
		
		case PORT_C:
		if (state == LOW)
 52e:	41 11       	cpse	r20, r1
 530:	0c c0       	rjmp	.+24     	; 0x54a <DIO_write+0xa4>
		{
			CLR_BIT(PORTC, pinNumber); // write 0
 532:	25 b3       	in	r18, 0x15	; 21
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_write+0x98>
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	6a 95       	dec	r22
 540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_write+0x94>
 542:	80 95       	com	r24
 544:	82 23       	and	r24, r18
 546:	85 bb       	out	0x15, r24	; 21
 548:	08 95       	ret
		}
		else if (state == OUT)
 54a:	41 30       	cpi	r20, 0x01	; 1
 54c:	29 f5       	brne	.+74     	; 0x598 <DIO_write+0xf2>
		{
			SET_BIT(PORTC, pinNumber); // write 1
 54e:	25 b3       	in	r18, 0x15	; 21
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	02 c0       	rjmp	.+4      	; 0x55a <DIO_write+0xb4>
 556:	88 0f       	add	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	6a 95       	dec	r22
 55c:	e2 f7       	brpl	.-8      	; 0x556 <DIO_write+0xb0>
 55e:	82 2b       	or	r24, r18
 560:	85 bb       	out	0x15, r24	; 21
 562:	08 95       	ret
			//error handling
		}
		break;
		
		case PORT_D:
		if (state == LOW)
 564:	41 11       	cpse	r20, r1
 566:	0c c0       	rjmp	.+24     	; 0x580 <DIO_write+0xda>
		{
			CLR_BIT(PORTC, pinNumber); // write 0
 568:	25 b3       	in	r18, 0x15	; 21
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	02 c0       	rjmp	.+4      	; 0x574 <DIO_write+0xce>
 570:	88 0f       	add	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	6a 95       	dec	r22
 576:	e2 f7       	brpl	.-8      	; 0x570 <DIO_write+0xca>
 578:	80 95       	com	r24
 57a:	82 23       	and	r24, r18
 57c:	85 bb       	out	0x15, r24	; 21
 57e:	08 95       	ret
		}
		else if (state == OUT)
 580:	41 30       	cpi	r20, 0x01	; 1
 582:	51 f4       	brne	.+20     	; 0x598 <DIO_write+0xf2>
		{
			SET_BIT(PORTC, pinNumber); // write 1
 584:	25 b3       	in	r18, 0x15	; 21
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	02 c0       	rjmp	.+4      	; 0x590 <DIO_write+0xea>
 58c:	88 0f       	add	r24, r24
 58e:	99 1f       	adc	r25, r25
 590:	6a 95       	dec	r22
 592:	e2 f7       	brpl	.-8      	; 0x58c <DIO_write+0xe6>
 594:	82 2b       	or	r24, r18
 596:	85 bb       	out	0x15, r24	; 21
 598:	08 95       	ret

0000059a <DIO_toggle>:

//this function takes the number of port and pin and return void
//it toggles the state of the pin as if it is low it will be high and vice versa
void DIO_toggle(uint8_t portNumber, uint8_t pinNumber)
{
	switch(portNumber)
 59a:	82 34       	cpi	r24, 0x42	; 66
 59c:	a1 f0       	breq	.+40     	; 0x5c6 <DIO_toggle+0x2c>
 59e:	18 f4       	brcc	.+6      	; 0x5a6 <DIO_toggle+0xc>
 5a0:	81 34       	cpi	r24, 0x41	; 65
 5a2:	31 f0       	breq	.+12     	; 0x5b0 <DIO_toggle+0x16>
 5a4:	08 95       	ret
 5a6:	83 34       	cpi	r24, 0x43	; 67
 5a8:	c9 f0       	breq	.+50     	; 0x5dc <DIO_toggle+0x42>
 5aa:	84 34       	cpi	r24, 0x44	; 68
 5ac:	11 f1       	breq	.+68     	; 0x5f2 <DIO_toggle+0x58>
 5ae:	08 95       	ret
	{
		case PORT_A:
		TOGGLE_BIT(PORTA,pinNumber); // toggle
 5b0:	2b b3       	in	r18, 0x1b	; 27
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_toggle+0x22>
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	6a 95       	dec	r22
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_toggle+0x1e>
 5c0:	82 27       	eor	r24, r18
 5c2:	8b bb       	out	0x1b, r24	; 27
		break;
 5c4:	08 95       	ret

		case PORT_B:
		TOGGLE_BIT(PORTB,pinNumber); // toggle
 5c6:	28 b3       	in	r18, 0x18	; 24
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_toggle+0x38>
 5ce:	88 0f       	add	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	6a 95       	dec	r22
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_toggle+0x34>
 5d6:	82 27       	eor	r24, r18
 5d8:	88 bb       	out	0x18, r24	; 24
		break;
 5da:	08 95       	ret
		
		case PORT_C:
		TOGGLE_BIT(PORTC,pinNumber); // toggle
 5dc:	25 b3       	in	r18, 0x15	; 21
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <DIO_toggle+0x4e>
 5e4:	88 0f       	add	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	6a 95       	dec	r22
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <DIO_toggle+0x4a>
 5ec:	82 27       	eor	r24, r18
 5ee:	85 bb       	out	0x15, r24	; 21
		break;
 5f0:	08 95       	ret
		
		case PORT_D:
		TOGGLE_BIT(PORTD,pinNumber); // toggle
 5f2:	22 b3       	in	r18, 0x12	; 18
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <DIO_toggle+0x64>
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	6a 95       	dec	r22
 600:	e2 f7       	brpl	.-8      	; 0x5fa <DIO_toggle+0x60>
 602:	82 27       	eor	r24, r18
 604:	82 bb       	out	0x12, r24	; 18
 606:	08 95       	ret

00000608 <DIO_read>:
//this function takes the number of port and pin and return uint8_t
//it determine the state of the pin if it is high or low
uint8_t DIO_read(uint8_t portNumber, uint8_t pinNumber)
{
	uint8_t state;
	switch(portNumber)
 608:	82 34       	cpi	r24, 0x42	; 66
 60a:	f9 f0       	breq	.+62     	; 0x64a <DIO_read+0x42>
 60c:	18 f4       	brcc	.+6      	; 0x614 <DIO_read+0xc>
 60e:	81 34       	cpi	r24, 0x41	; 65
 610:	39 f0       	breq	.+14     	; 0x620 <DIO_read+0x18>
 612:	59 c0       	rjmp	.+178    	; 0x6c6 <DIO_read+0xbe>
 614:	83 34       	cpi	r24, 0x43	; 67
 616:	71 f1       	breq	.+92     	; 0x674 <DIO_read+0x6c>
 618:	84 34       	cpi	r24, 0x44	; 68
 61a:	09 f4       	brne	.+2      	; 0x61e <DIO_read+0x16>
 61c:	40 c0       	rjmp	.+128    	; 0x69e <DIO_read+0x96>
 61e:	53 c0       	rjmp	.+166    	; 0x6c6 <DIO_read+0xbe>
	{
		case PORT_A:
		state = GET_BIT(PINA, pinNumber); //get state -> read bit
 620:	49 b3       	in	r20, 0x19	; 25
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	9c 01       	movw	r18, r24
 628:	06 2e       	mov	r0, r22
 62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_read+0x28>
 62c:	22 0f       	add	r18, r18
 62e:	33 1f       	adc	r19, r19
 630:	0a 94       	dec	r0
 632:	e2 f7       	brpl	.-8      	; 0x62c <DIO_read+0x24>
 634:	84 2f       	mov	r24, r20
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	82 23       	and	r24, r18
 63a:	93 23       	and	r25, r19
 63c:	02 c0       	rjmp	.+4      	; 0x642 <DIO_read+0x3a>
 63e:	95 95       	asr	r25
 640:	87 95       	ror	r24
 642:	6a 95       	dec	r22
 644:	e2 f7       	brpl	.-8      	; 0x63e <DIO_read+0x36>
 646:	98 2f       	mov	r25, r24
		break;
 648:	3e c0       	rjmp	.+124    	; 0x6c6 <DIO_read+0xbe>

		case PORT_B:
		state = GET_BIT(PINB, pinNumber); //get state -> read bit
 64a:	46 b3       	in	r20, 0x16	; 22
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	9c 01       	movw	r18, r24
 652:	06 2e       	mov	r0, r22
 654:	02 c0       	rjmp	.+4      	; 0x65a <DIO_read+0x52>
 656:	22 0f       	add	r18, r18
 658:	33 1f       	adc	r19, r19
 65a:	0a 94       	dec	r0
 65c:	e2 f7       	brpl	.-8      	; 0x656 <DIO_read+0x4e>
 65e:	84 2f       	mov	r24, r20
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	82 23       	and	r24, r18
 664:	93 23       	and	r25, r19
 666:	02 c0       	rjmp	.+4      	; 0x66c <DIO_read+0x64>
 668:	95 95       	asr	r25
 66a:	87 95       	ror	r24
 66c:	6a 95       	dec	r22
 66e:	e2 f7       	brpl	.-8      	; 0x668 <DIO_read+0x60>
 670:	98 2f       	mov	r25, r24
		break;
 672:	29 c0       	rjmp	.+82     	; 0x6c6 <DIO_read+0xbe>
		
		case PORT_C:
		state = GET_BIT(PINC, pinNumber); //get state -> read bit
 674:	43 b3       	in	r20, 0x13	; 19
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	9c 01       	movw	r18, r24
 67c:	06 2e       	mov	r0, r22
 67e:	02 c0       	rjmp	.+4      	; 0x684 <DIO_read+0x7c>
 680:	22 0f       	add	r18, r18
 682:	33 1f       	adc	r19, r19
 684:	0a 94       	dec	r0
 686:	e2 f7       	brpl	.-8      	; 0x680 <DIO_read+0x78>
 688:	84 2f       	mov	r24, r20
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	82 23       	and	r24, r18
 68e:	93 23       	and	r25, r19
 690:	02 c0       	rjmp	.+4      	; 0x696 <DIO_read+0x8e>
 692:	95 95       	asr	r25
 694:	87 95       	ror	r24
 696:	6a 95       	dec	r22
 698:	e2 f7       	brpl	.-8      	; 0x692 <DIO_read+0x8a>
 69a:	98 2f       	mov	r25, r24
		break;
 69c:	14 c0       	rjmp	.+40     	; 0x6c6 <DIO_read+0xbe>
		
		case PORT_D:
		state = GET_BIT(PIND, pinNumber); //get state -> read bit
 69e:	40 b3       	in	r20, 0x10	; 16
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	9c 01       	movw	r18, r24
 6a6:	06 2e       	mov	r0, r22
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <DIO_read+0xa6>
 6aa:	22 0f       	add	r18, r18
 6ac:	33 1f       	adc	r19, r19
 6ae:	0a 94       	dec	r0
 6b0:	e2 f7       	brpl	.-8      	; 0x6aa <DIO_read+0xa2>
 6b2:	84 2f       	mov	r24, r20
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	82 23       	and	r24, r18
 6b8:	93 23       	and	r25, r19
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <DIO_read+0xb8>
 6bc:	95 95       	asr	r25
 6be:	87 95       	ror	r24
 6c0:	6a 95       	dec	r22
 6c2:	e2 f7       	brpl	.-8      	; 0x6bc <DIO_read+0xb4>
 6c4:	98 2f       	mov	r25, r24
		default:
		// error handling
		break;
	}
	return state;
}
 6c6:	89 2f       	mov	r24, r25
 6c8:	08 95       	ret

000006ca <INT0_init>:
//this function takes void and return void
//SET global interrupt enable, choose control sense of interrupt and enable external interrupt 0
void INT0_init(void)
{
	//  enable global interrupt
	sei(); // SET_BIT(SREG,7);
 6ca:	78 94       	sei
	// RISING EDGE
	SET_BIT(MCUCR, 0);
 6cc:	85 b7       	in	r24, 0x35	; 53
 6ce:	81 60       	ori	r24, 0x01	; 1
 6d0:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR, 1);
 6d2:	85 b7       	in	r24, 0x35	; 53
 6d4:	82 60       	ori	r24, 0x02	; 2
 6d6:	85 bf       	out	0x35, r24	; 53
	// enable external interrupt
	SET_BIT(GICR, 6);
 6d8:	8b b7       	in	r24, 0x3b	; 59
 6da:	80 64       	ori	r24, 0x40	; 64
 6dc:	8b bf       	out	0x3b, r24	; 59
 6de:	08 95       	ret

000006e0 <TIMER_init>:
 //2) mode of operation
 //3) setting timer prescaler
void TIMER_init(void)
{
	// timer set initial value
	TCNT0 = 0;
 6e0:	12 be       	out	0x32, r1	; 50
	//NORMAL MODE
	CLR_BIT(TCCR0, 6);
 6e2:	83 b7       	in	r24, 0x33	; 51
 6e4:	8f 7b       	andi	r24, 0xBF	; 191
 6e6:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, 3);
 6e8:	83 b7       	in	r24, 0x33	; 51
 6ea:	87 7f       	andi	r24, 0xF7	; 247
 6ec:	83 bf       	out	0x33, r24	; 51
	// COMPARE DISCONNECTED
	CLR_BIT(TCCR0, 4);
 6ee:	83 b7       	in	r24, 0x33	; 51
 6f0:	8f 7e       	andi	r24, 0xEF	; 239
 6f2:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, 5);
 6f4:	83 b7       	in	r24, 0x33	; 51
 6f6:	8f 7d       	andi	r24, 0xDF	; 223
 6f8:	83 bf       	out	0x33, r24	; 51
	// PRESCALER 1024
	SET_BIT(TCCR0, 0);
 6fa:	83 b7       	in	r24, 0x33	; 51
 6fc:	81 60       	ori	r24, 0x01	; 1
 6fe:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, 1);
 700:	83 b7       	in	r24, 0x33	; 51
 702:	8d 7f       	andi	r24, 0xFD	; 253
 704:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, 2);
 706:	83 b7       	in	r24, 0x33	; 51
 708:	84 60       	ori	r24, 0x04	; 4
 70a:	83 bf       	out	0x33, r24	; 51
 70c:	08 95       	ret

0000070e <TIMER_delay>:
}

//This function takes The required delay time in ms and return void
// calculate tick time and max delay for this timer and check for three cases to calculate timer initial value and no. of over flows needed
void TIMER_delay(uint32_t delayTimer)
{
 70e:	8f 92       	push	r8
 710:	9f 92       	push	r9
 712:	af 92       	push	r10
 714:	bf 92       	push	r11
 716:	cf 92       	push	r12
 718:	df 92       	push	r13
 71a:	ef 92       	push	r14
 71c:	ff 92       	push	r15
 71e:	0f 93       	push	r16
 720:	1f 93       	push	r17
 722:	6b 01       	movw	r12, r22
 724:	7c 01       	movw	r14, r24
	//T_tick= prescaler/ CPU frequency
	tTick = 1024.0 / 1000.0; // milLi second
	// Tmaxdelay = Ttick * 2^n -> 8-bit timer
	tMaxDelay = tTick * 256; // milli seconds
	
	if(delayTimer<tMaxDelay)
 726:	0e 94 a3 04 	call	0x946	; 0x946 <__floatunsisf>
 72a:	4b 01       	movw	r8, r22
 72c:	5c 01       	movw	r10, r24
 72e:	2f e6       	ldi	r18, 0x6F	; 111
 730:	32 e1       	ldi	r19, 0x12	; 18
 732:	43 e8       	ldi	r20, 0x83	; 131
 734:	53 e4       	ldi	r21, 0x43	; 67
 736:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__cmpsf2>
 73a:	88 23       	and	r24, r24
 73c:	5c f1       	brlt	.+86     	; 0x794 <TIMER_delay+0x86>
	{
		initialTimer = (tMaxDelay-delayTimer)/tTick;
		numberOfOverflows = 1;
	}
	
	else if(delayTimer == (int)tMaxDelay)
 73e:	86 e0       	ldi	r24, 0x06	; 6
 740:	c8 16       	cp	r12, r24
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	d8 06       	cpc	r13, r24
 746:	e1 04       	cpc	r14, r1
 748:	f1 04       	cpc	r15, r1
 74a:	49 f1       	breq	.+82     	; 0x79e <TIMER_delay+0x90>
		numberOfOverflows=1;
	}
	
	else
	{
		numberOfOverflows = ceil((double)delayTimer/tMaxDelay);
 74c:	2f e6       	ldi	r18, 0x6F	; 111
 74e:	32 e1       	ldi	r19, 0x12	; 18
 750:	43 e8       	ldi	r20, 0x83	; 131
 752:	53 e4       	ldi	r21, 0x43	; 67
 754:	c5 01       	movw	r24, r10
 756:	b4 01       	movw	r22, r8
 758:	0e 94 02 04 	call	0x804	; 0x804 <__divsf3>
 75c:	0e 94 e6 03 	call	0x7cc	; 0x7cc <ceil>
 760:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__fixunssfsi>
 764:	8b 01       	movw	r16, r22
 766:	9c 01       	movw	r18, r24
 768:	1e c0       	rjmp	.+60     	; 0x7a6 <TIMER_delay+0x98>
	// busy waiting for over flow flag
	while (overflowCounter < numberOfOverflows){
		while (( TIFR & (1<<0) )==0 )
		{
			//	 wait for the flag
			if (initFlag)
 76a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 76e:	81 11       	cpse	r24, r1
 770:	03 c0       	rjmp	.+6      	; 0x778 <TIMER_delay+0x6a>
		initialTimer = 256 - ((double)delayTimer/tTick)/numberOfOverflows;
	}
	
	// busy waiting for over flow flag
	while (overflowCounter < numberOfOverflows){
		while (( TIFR & (1<<0) )==0 )
 772:	08 b6       	in	r0, 0x38	; 56
 774:	00 fe       	sbrs	r0, 0
 776:	f9 cf       	rjmp	.-14     	; 0x76a <TIMER_delay+0x5c>
			{
				break;
			}
		}
		//clear the overflow flag
		SET_BIT(TIFR, 0);
 778:	88 b7       	in	r24, 0x38	; 56
 77a:	81 60       	ori	r24, 0x01	; 1
 77c:	88 bf       	out	0x38, r24	; 56
		overflowCounter++;
 77e:	4f 5f       	subi	r20, 0xFF	; 255
 780:	5f 4f       	sbci	r21, 0xFF	; 255
 782:	6f 4f       	sbci	r22, 0xFF	; 255
 784:	7f 4f       	sbci	r23, 0xFF	; 255
		if (initFlag)
 786:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 78a:	88 23       	and	r24, r24
 78c:	79 f0       	breq	.+30     	; 0x7ac <TIMER_delay+0x9e>
		{
			initFlag = 0;
 78e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
 792:	11 c0       	rjmp	.+34     	; 0x7b6 <TIMER_delay+0xa8>
	tMaxDelay = tTick * 256; // milli seconds
	
	if(delayTimer<tMaxDelay)
	{
		initialTimer = (tMaxDelay-delayTimer)/tTick;
		numberOfOverflows = 1;
 794:	01 e0       	ldi	r16, 0x01	; 1
 796:	10 e0       	ldi	r17, 0x00	; 0
 798:	20 e0       	ldi	r18, 0x00	; 0
 79a:	30 e0       	ldi	r19, 0x00	; 0
 79c:	04 c0       	rjmp	.+8      	; 0x7a6 <TIMER_delay+0x98>
	}
	
	else if(delayTimer == (int)tMaxDelay)
	{
		initialTimer=0;
		numberOfOverflows=1;
 79e:	01 e0       	ldi	r16, 0x01	; 1
 7a0:	10 e0       	ldi	r17, 0x00	; 0
 7a2:	20 e0       	ldi	r18, 0x00	; 0
 7a4:	30 e0       	ldi	r19, 0x00	; 0
	tMaxDelay = tTick * 256; // milli seconds
	
	if(delayTimer<tMaxDelay)
	{
		initialTimer = (tMaxDelay-delayTimer)/tTick;
		numberOfOverflows = 1;
 7a6:	40 e0       	ldi	r20, 0x00	; 0
 7a8:	50 e0       	ldi	r21, 0x00	; 0
 7aa:	ba 01       	movw	r22, r20
		numberOfOverflows = ceil((double)delayTimer/tMaxDelay);
		initialTimer = 256 - ((double)delayTimer/tTick)/numberOfOverflows;
	}
	
	// busy waiting for over flow flag
	while (overflowCounter < numberOfOverflows){
 7ac:	40 17       	cp	r20, r16
 7ae:	51 07       	cpc	r21, r17
 7b0:	62 07       	cpc	r22, r18
 7b2:	73 07       	cpc	r23, r19
 7b4:	f0 f2       	brcs	.-68     	; 0x772 <TIMER_delay+0x64>
			initFlag = 0;
			break;
		}
	}
	overflowCounter =0;
}
 7b6:	1f 91       	pop	r17
 7b8:	0f 91       	pop	r16
 7ba:	ff 90       	pop	r15
 7bc:	ef 90       	pop	r14
 7be:	df 90       	pop	r13
 7c0:	cf 90       	pop	r12
 7c2:	bf 90       	pop	r11
 7c4:	af 90       	pop	r10
 7c6:	9f 90       	pop	r9
 7c8:	8f 90       	pop	r8
 7ca:	08 95       	ret

000007cc <ceil>:
 7cc:	0e 94 77 05 	call	0xaee	; 0xaee <__fp_trunc>
 7d0:	90 f0       	brcs	.+36     	; 0x7f6 <ceil+0x2a>
 7d2:	9f 37       	cpi	r25, 0x7F	; 127
 7d4:	48 f4       	brcc	.+18     	; 0x7e8 <ceil+0x1c>
 7d6:	91 11       	cpse	r25, r1
 7d8:	16 f4       	brtc	.+4      	; 0x7de <ceil+0x12>
 7da:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_szero>
 7de:	60 e0       	ldi	r22, 0x00	; 0
 7e0:	70 e0       	ldi	r23, 0x00	; 0
 7e2:	80 e8       	ldi	r24, 0x80	; 128
 7e4:	9f e3       	ldi	r25, 0x3F	; 63
 7e6:	08 95       	ret
 7e8:	26 f0       	brts	.+8      	; 0x7f2 <ceil+0x26>
 7ea:	1b 16       	cp	r1, r27
 7ec:	61 1d       	adc	r22, r1
 7ee:	71 1d       	adc	r23, r1
 7f0:	81 1d       	adc	r24, r1
 7f2:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__fp_mintl>
 7f6:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__fp_mpack>

000007fa <__cmpsf2>:
 7fa:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__fp_cmp>
 7fe:	08 f4       	brcc	.+2      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	08 95       	ret

00000804 <__divsf3>:
 804:	0e 94 16 04 	call	0x82c	; 0x82c <__divsf3x>
 808:	0c 94 44 05 	jmp	0xa88	; 0xa88 <__fp_round>
 80c:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__fp_pscB>
 810:	58 f0       	brcs	.+22     	; 0x828 <__divsf3+0x24>
 812:	0e 94 36 05 	call	0xa6c	; 0xa6c <__fp_pscA>
 816:	40 f0       	brcs	.+16     	; 0x828 <__divsf3+0x24>
 818:	29 f4       	brne	.+10     	; 0x824 <__divsf3+0x20>
 81a:	5f 3f       	cpi	r21, 0xFF	; 255
 81c:	29 f0       	breq	.+10     	; 0x828 <__divsf3+0x24>
 81e:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__fp_inf>
 822:	51 11       	cpse	r21, r1
 824:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_szero>
 828:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__fp_nan>

0000082c <__divsf3x>:
 82c:	0e 94 55 05 	call	0xaaa	; 0xaaa <__fp_split3>
 830:	68 f3       	brcs	.-38     	; 0x80c <__divsf3+0x8>

00000832 <__divsf3_pse>:
 832:	99 23       	and	r25, r25
 834:	b1 f3       	breq	.-20     	; 0x822 <__divsf3+0x1e>
 836:	55 23       	and	r21, r21
 838:	91 f3       	breq	.-28     	; 0x81e <__divsf3+0x1a>
 83a:	95 1b       	sub	r25, r21
 83c:	55 0b       	sbc	r21, r21
 83e:	bb 27       	eor	r27, r27
 840:	aa 27       	eor	r26, r26
 842:	62 17       	cp	r22, r18
 844:	73 07       	cpc	r23, r19
 846:	84 07       	cpc	r24, r20
 848:	38 f0       	brcs	.+14     	; 0x858 <__divsf3_pse+0x26>
 84a:	9f 5f       	subi	r25, 0xFF	; 255
 84c:	5f 4f       	sbci	r21, 0xFF	; 255
 84e:	22 0f       	add	r18, r18
 850:	33 1f       	adc	r19, r19
 852:	44 1f       	adc	r20, r20
 854:	aa 1f       	adc	r26, r26
 856:	a9 f3       	breq	.-22     	; 0x842 <__divsf3_pse+0x10>
 858:	35 d0       	rcall	.+106    	; 0x8c4 <__stack+0x65>
 85a:	0e 2e       	mov	r0, r30
 85c:	3a f0       	brmi	.+14     	; 0x86c <__stack+0xd>
 85e:	e0 e8       	ldi	r30, 0x80	; 128
 860:	32 d0       	rcall	.+100    	; 0x8c6 <__stack+0x67>
 862:	91 50       	subi	r25, 0x01	; 1
 864:	50 40       	sbci	r21, 0x00	; 0
 866:	e6 95       	lsr	r30
 868:	00 1c       	adc	r0, r0
 86a:	ca f7       	brpl	.-14     	; 0x85e <__divsf3_pse+0x2c>
 86c:	2b d0       	rcall	.+86     	; 0x8c4 <__stack+0x65>
 86e:	fe 2f       	mov	r31, r30
 870:	29 d0       	rcall	.+82     	; 0x8c4 <__stack+0x65>
 872:	66 0f       	add	r22, r22
 874:	77 1f       	adc	r23, r23
 876:	88 1f       	adc	r24, r24
 878:	bb 1f       	adc	r27, r27
 87a:	26 17       	cp	r18, r22
 87c:	37 07       	cpc	r19, r23
 87e:	48 07       	cpc	r20, r24
 880:	ab 07       	cpc	r26, r27
 882:	b0 e8       	ldi	r27, 0x80	; 128
 884:	09 f0       	breq	.+2      	; 0x888 <__stack+0x29>
 886:	bb 0b       	sbc	r27, r27
 888:	80 2d       	mov	r24, r0
 88a:	bf 01       	movw	r22, r30
 88c:	ff 27       	eor	r31, r31
 88e:	93 58       	subi	r25, 0x83	; 131
 890:	5f 4f       	sbci	r21, 0xFF	; 255
 892:	3a f0       	brmi	.+14     	; 0x8a2 <__stack+0x43>
 894:	9e 3f       	cpi	r25, 0xFE	; 254
 896:	51 05       	cpc	r21, r1
 898:	78 f0       	brcs	.+30     	; 0x8b8 <__stack+0x59>
 89a:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__fp_inf>
 89e:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_szero>
 8a2:	5f 3f       	cpi	r21, 0xFF	; 255
 8a4:	e4 f3       	brlt	.-8      	; 0x89e <__stack+0x3f>
 8a6:	98 3e       	cpi	r25, 0xE8	; 232
 8a8:	d4 f3       	brlt	.-12     	; 0x89e <__stack+0x3f>
 8aa:	86 95       	lsr	r24
 8ac:	77 95       	ror	r23
 8ae:	67 95       	ror	r22
 8b0:	b7 95       	ror	r27
 8b2:	f7 95       	ror	r31
 8b4:	9f 5f       	subi	r25, 0xFF	; 255
 8b6:	c9 f7       	brne	.-14     	; 0x8aa <__stack+0x4b>
 8b8:	88 0f       	add	r24, r24
 8ba:	91 1d       	adc	r25, r1
 8bc:	96 95       	lsr	r25
 8be:	87 95       	ror	r24
 8c0:	97 f9       	bld	r25, 7
 8c2:	08 95       	ret
 8c4:	e1 e0       	ldi	r30, 0x01	; 1
 8c6:	66 0f       	add	r22, r22
 8c8:	77 1f       	adc	r23, r23
 8ca:	88 1f       	adc	r24, r24
 8cc:	bb 1f       	adc	r27, r27
 8ce:	62 17       	cp	r22, r18
 8d0:	73 07       	cpc	r23, r19
 8d2:	84 07       	cpc	r24, r20
 8d4:	ba 07       	cpc	r27, r26
 8d6:	20 f0       	brcs	.+8      	; 0x8e0 <__stack+0x81>
 8d8:	62 1b       	sub	r22, r18
 8da:	73 0b       	sbc	r23, r19
 8dc:	84 0b       	sbc	r24, r20
 8de:	ba 0b       	sbc	r27, r26
 8e0:	ee 1f       	adc	r30, r30
 8e2:	88 f7       	brcc	.-30     	; 0x8c6 <__stack+0x67>
 8e4:	e0 95       	com	r30
 8e6:	08 95       	ret

000008e8 <__fixunssfsi>:
 8e8:	0e 94 5d 05 	call	0xaba	; 0xaba <__fp_splitA>
 8ec:	88 f0       	brcs	.+34     	; 0x910 <__fixunssfsi+0x28>
 8ee:	9f 57       	subi	r25, 0x7F	; 127
 8f0:	98 f0       	brcs	.+38     	; 0x918 <__fixunssfsi+0x30>
 8f2:	b9 2f       	mov	r27, r25
 8f4:	99 27       	eor	r25, r25
 8f6:	b7 51       	subi	r27, 0x17	; 23
 8f8:	b0 f0       	brcs	.+44     	; 0x926 <__fixunssfsi+0x3e>
 8fa:	e1 f0       	breq	.+56     	; 0x934 <__fixunssfsi+0x4c>
 8fc:	66 0f       	add	r22, r22
 8fe:	77 1f       	adc	r23, r23
 900:	88 1f       	adc	r24, r24
 902:	99 1f       	adc	r25, r25
 904:	1a f0       	brmi	.+6      	; 0x90c <__fixunssfsi+0x24>
 906:	ba 95       	dec	r27
 908:	c9 f7       	brne	.-14     	; 0x8fc <__fixunssfsi+0x14>
 90a:	14 c0       	rjmp	.+40     	; 0x934 <__fixunssfsi+0x4c>
 90c:	b1 30       	cpi	r27, 0x01	; 1
 90e:	91 f0       	breq	.+36     	; 0x934 <__fixunssfsi+0x4c>
 910:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fp_zero>
 914:	b1 e0       	ldi	r27, 0x01	; 1
 916:	08 95       	ret
 918:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <__fp_zero>
 91c:	67 2f       	mov	r22, r23
 91e:	78 2f       	mov	r23, r24
 920:	88 27       	eor	r24, r24
 922:	b8 5f       	subi	r27, 0xF8	; 248
 924:	39 f0       	breq	.+14     	; 0x934 <__fixunssfsi+0x4c>
 926:	b9 3f       	cpi	r27, 0xF9	; 249
 928:	cc f3       	brlt	.-14     	; 0x91c <__fixunssfsi+0x34>
 92a:	86 95       	lsr	r24
 92c:	77 95       	ror	r23
 92e:	67 95       	ror	r22
 930:	b3 95       	inc	r27
 932:	d9 f7       	brne	.-10     	; 0x92a <__fixunssfsi+0x42>
 934:	3e f4       	brtc	.+14     	; 0x944 <__fixunssfsi+0x5c>
 936:	90 95       	com	r25
 938:	80 95       	com	r24
 93a:	70 95       	com	r23
 93c:	61 95       	neg	r22
 93e:	7f 4f       	sbci	r23, 0xFF	; 255
 940:	8f 4f       	sbci	r24, 0xFF	; 255
 942:	9f 4f       	sbci	r25, 0xFF	; 255
 944:	08 95       	ret

00000946 <__floatunsisf>:
 946:	e8 94       	clt
 948:	09 c0       	rjmp	.+18     	; 0x95c <__floatsisf+0x12>

0000094a <__floatsisf>:
 94a:	97 fb       	bst	r25, 7
 94c:	3e f4       	brtc	.+14     	; 0x95c <__floatsisf+0x12>
 94e:	90 95       	com	r25
 950:	80 95       	com	r24
 952:	70 95       	com	r23
 954:	61 95       	neg	r22
 956:	7f 4f       	sbci	r23, 0xFF	; 255
 958:	8f 4f       	sbci	r24, 0xFF	; 255
 95a:	9f 4f       	sbci	r25, 0xFF	; 255
 95c:	99 23       	and	r25, r25
 95e:	a9 f0       	breq	.+42     	; 0x98a <__floatsisf+0x40>
 960:	f9 2f       	mov	r31, r25
 962:	96 e9       	ldi	r25, 0x96	; 150
 964:	bb 27       	eor	r27, r27
 966:	93 95       	inc	r25
 968:	f6 95       	lsr	r31
 96a:	87 95       	ror	r24
 96c:	77 95       	ror	r23
 96e:	67 95       	ror	r22
 970:	b7 95       	ror	r27
 972:	f1 11       	cpse	r31, r1
 974:	f8 cf       	rjmp	.-16     	; 0x966 <__floatsisf+0x1c>
 976:	fa f4       	brpl	.+62     	; 0x9b6 <__floatsisf+0x6c>
 978:	bb 0f       	add	r27, r27
 97a:	11 f4       	brne	.+4      	; 0x980 <__floatsisf+0x36>
 97c:	60 ff       	sbrs	r22, 0
 97e:	1b c0       	rjmp	.+54     	; 0x9b6 <__floatsisf+0x6c>
 980:	6f 5f       	subi	r22, 0xFF	; 255
 982:	7f 4f       	sbci	r23, 0xFF	; 255
 984:	8f 4f       	sbci	r24, 0xFF	; 255
 986:	9f 4f       	sbci	r25, 0xFF	; 255
 988:	16 c0       	rjmp	.+44     	; 0x9b6 <__floatsisf+0x6c>
 98a:	88 23       	and	r24, r24
 98c:	11 f0       	breq	.+4      	; 0x992 <__floatsisf+0x48>
 98e:	96 e9       	ldi	r25, 0x96	; 150
 990:	11 c0       	rjmp	.+34     	; 0x9b4 <__floatsisf+0x6a>
 992:	77 23       	and	r23, r23
 994:	21 f0       	breq	.+8      	; 0x99e <__floatsisf+0x54>
 996:	9e e8       	ldi	r25, 0x8E	; 142
 998:	87 2f       	mov	r24, r23
 99a:	76 2f       	mov	r23, r22
 99c:	05 c0       	rjmp	.+10     	; 0x9a8 <__floatsisf+0x5e>
 99e:	66 23       	and	r22, r22
 9a0:	71 f0       	breq	.+28     	; 0x9be <__floatsisf+0x74>
 9a2:	96 e8       	ldi	r25, 0x86	; 134
 9a4:	86 2f       	mov	r24, r22
 9a6:	70 e0       	ldi	r23, 0x00	; 0
 9a8:	60 e0       	ldi	r22, 0x00	; 0
 9aa:	2a f0       	brmi	.+10     	; 0x9b6 <__floatsisf+0x6c>
 9ac:	9a 95       	dec	r25
 9ae:	66 0f       	add	r22, r22
 9b0:	77 1f       	adc	r23, r23
 9b2:	88 1f       	adc	r24, r24
 9b4:	da f7       	brpl	.-10     	; 0x9ac <__floatsisf+0x62>
 9b6:	88 0f       	add	r24, r24
 9b8:	96 95       	lsr	r25
 9ba:	87 95       	ror	r24
 9bc:	97 f9       	bld	r25, 7
 9be:	08 95       	ret

000009c0 <__fp_cmp>:
 9c0:	99 0f       	add	r25, r25
 9c2:	00 08       	sbc	r0, r0
 9c4:	55 0f       	add	r21, r21
 9c6:	aa 0b       	sbc	r26, r26
 9c8:	e0 e8       	ldi	r30, 0x80	; 128
 9ca:	fe ef       	ldi	r31, 0xFE	; 254
 9cc:	16 16       	cp	r1, r22
 9ce:	17 06       	cpc	r1, r23
 9d0:	e8 07       	cpc	r30, r24
 9d2:	f9 07       	cpc	r31, r25
 9d4:	c0 f0       	brcs	.+48     	; 0xa06 <__fp_cmp+0x46>
 9d6:	12 16       	cp	r1, r18
 9d8:	13 06       	cpc	r1, r19
 9da:	e4 07       	cpc	r30, r20
 9dc:	f5 07       	cpc	r31, r21
 9de:	98 f0       	brcs	.+38     	; 0xa06 <__fp_cmp+0x46>
 9e0:	62 1b       	sub	r22, r18
 9e2:	73 0b       	sbc	r23, r19
 9e4:	84 0b       	sbc	r24, r20
 9e6:	95 0b       	sbc	r25, r21
 9e8:	39 f4       	brne	.+14     	; 0x9f8 <__fp_cmp+0x38>
 9ea:	0a 26       	eor	r0, r26
 9ec:	61 f0       	breq	.+24     	; 0xa06 <__fp_cmp+0x46>
 9ee:	23 2b       	or	r18, r19
 9f0:	24 2b       	or	r18, r20
 9f2:	25 2b       	or	r18, r21
 9f4:	21 f4       	brne	.+8      	; 0x9fe <__fp_cmp+0x3e>
 9f6:	08 95       	ret
 9f8:	0a 26       	eor	r0, r26
 9fa:	09 f4       	brne	.+2      	; 0x9fe <__fp_cmp+0x3e>
 9fc:	a1 40       	sbci	r26, 0x01	; 1
 9fe:	a6 95       	lsr	r26
 a00:	8f ef       	ldi	r24, 0xFF	; 255
 a02:	81 1d       	adc	r24, r1
 a04:	81 1d       	adc	r24, r1
 a06:	08 95       	ret

00000a08 <__fp_inf>:
 a08:	97 f9       	bld	r25, 7
 a0a:	9f 67       	ori	r25, 0x7F	; 127
 a0c:	80 e8       	ldi	r24, 0x80	; 128
 a0e:	70 e0       	ldi	r23, 0x00	; 0
 a10:	60 e0       	ldi	r22, 0x00	; 0
 a12:	08 95       	ret

00000a14 <__fp_mintl>:
 a14:	88 23       	and	r24, r24
 a16:	71 f4       	brne	.+28     	; 0xa34 <__fp_mintl+0x20>
 a18:	77 23       	and	r23, r23
 a1a:	21 f0       	breq	.+8      	; 0xa24 <__fp_mintl+0x10>
 a1c:	98 50       	subi	r25, 0x08	; 8
 a1e:	87 2b       	or	r24, r23
 a20:	76 2f       	mov	r23, r22
 a22:	07 c0       	rjmp	.+14     	; 0xa32 <__fp_mintl+0x1e>
 a24:	66 23       	and	r22, r22
 a26:	11 f4       	brne	.+4      	; 0xa2c <__fp_mintl+0x18>
 a28:	99 27       	eor	r25, r25
 a2a:	0d c0       	rjmp	.+26     	; 0xa46 <__fp_mintl+0x32>
 a2c:	90 51       	subi	r25, 0x10	; 16
 a2e:	86 2b       	or	r24, r22
 a30:	70 e0       	ldi	r23, 0x00	; 0
 a32:	60 e0       	ldi	r22, 0x00	; 0
 a34:	2a f0       	brmi	.+10     	; 0xa40 <__fp_mintl+0x2c>
 a36:	9a 95       	dec	r25
 a38:	66 0f       	add	r22, r22
 a3a:	77 1f       	adc	r23, r23
 a3c:	88 1f       	adc	r24, r24
 a3e:	da f7       	brpl	.-10     	; 0xa36 <__fp_mintl+0x22>
 a40:	88 0f       	add	r24, r24
 a42:	96 95       	lsr	r25
 a44:	87 95       	ror	r24
 a46:	97 f9       	bld	r25, 7
 a48:	08 95       	ret

00000a4a <__fp_mpack>:
 a4a:	9f 3f       	cpi	r25, 0xFF	; 255
 a4c:	31 f0       	breq	.+12     	; 0xa5a <__fp_mpack_finite+0xc>

00000a4e <__fp_mpack_finite>:
 a4e:	91 50       	subi	r25, 0x01	; 1
 a50:	20 f4       	brcc	.+8      	; 0xa5a <__fp_mpack_finite+0xc>
 a52:	87 95       	ror	r24
 a54:	77 95       	ror	r23
 a56:	67 95       	ror	r22
 a58:	b7 95       	ror	r27
 a5a:	88 0f       	add	r24, r24
 a5c:	91 1d       	adc	r25, r1
 a5e:	96 95       	lsr	r25
 a60:	87 95       	ror	r24
 a62:	97 f9       	bld	r25, 7
 a64:	08 95       	ret

00000a66 <__fp_nan>:
 a66:	9f ef       	ldi	r25, 0xFF	; 255
 a68:	80 ec       	ldi	r24, 0xC0	; 192
 a6a:	08 95       	ret

00000a6c <__fp_pscA>:
 a6c:	00 24       	eor	r0, r0
 a6e:	0a 94       	dec	r0
 a70:	16 16       	cp	r1, r22
 a72:	17 06       	cpc	r1, r23
 a74:	18 06       	cpc	r1, r24
 a76:	09 06       	cpc	r0, r25
 a78:	08 95       	ret

00000a7a <__fp_pscB>:
 a7a:	00 24       	eor	r0, r0
 a7c:	0a 94       	dec	r0
 a7e:	12 16       	cp	r1, r18
 a80:	13 06       	cpc	r1, r19
 a82:	14 06       	cpc	r1, r20
 a84:	05 06       	cpc	r0, r21
 a86:	08 95       	ret

00000a88 <__fp_round>:
 a88:	09 2e       	mov	r0, r25
 a8a:	03 94       	inc	r0
 a8c:	00 0c       	add	r0, r0
 a8e:	11 f4       	brne	.+4      	; 0xa94 <__fp_round+0xc>
 a90:	88 23       	and	r24, r24
 a92:	52 f0       	brmi	.+20     	; 0xaa8 <__fp_round+0x20>
 a94:	bb 0f       	add	r27, r27
 a96:	40 f4       	brcc	.+16     	; 0xaa8 <__fp_round+0x20>
 a98:	bf 2b       	or	r27, r31
 a9a:	11 f4       	brne	.+4      	; 0xaa0 <__fp_round+0x18>
 a9c:	60 ff       	sbrs	r22, 0
 a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__fp_round+0x20>
 aa0:	6f 5f       	subi	r22, 0xFF	; 255
 aa2:	7f 4f       	sbci	r23, 0xFF	; 255
 aa4:	8f 4f       	sbci	r24, 0xFF	; 255
 aa6:	9f 4f       	sbci	r25, 0xFF	; 255
 aa8:	08 95       	ret

00000aaa <__fp_split3>:
 aaa:	57 fd       	sbrc	r21, 7
 aac:	90 58       	subi	r25, 0x80	; 128
 aae:	44 0f       	add	r20, r20
 ab0:	55 1f       	adc	r21, r21
 ab2:	59 f0       	breq	.+22     	; 0xaca <__fp_splitA+0x10>
 ab4:	5f 3f       	cpi	r21, 0xFF	; 255
 ab6:	71 f0       	breq	.+28     	; 0xad4 <__fp_splitA+0x1a>
 ab8:	47 95       	ror	r20

00000aba <__fp_splitA>:
 aba:	88 0f       	add	r24, r24
 abc:	97 fb       	bst	r25, 7
 abe:	99 1f       	adc	r25, r25
 ac0:	61 f0       	breq	.+24     	; 0xada <__fp_splitA+0x20>
 ac2:	9f 3f       	cpi	r25, 0xFF	; 255
 ac4:	79 f0       	breq	.+30     	; 0xae4 <__fp_splitA+0x2a>
 ac6:	87 95       	ror	r24
 ac8:	08 95       	ret
 aca:	12 16       	cp	r1, r18
 acc:	13 06       	cpc	r1, r19
 ace:	14 06       	cpc	r1, r20
 ad0:	55 1f       	adc	r21, r21
 ad2:	f2 cf       	rjmp	.-28     	; 0xab8 <__fp_split3+0xe>
 ad4:	46 95       	lsr	r20
 ad6:	f1 df       	rcall	.-30     	; 0xaba <__fp_splitA>
 ad8:	08 c0       	rjmp	.+16     	; 0xaea <__fp_splitA+0x30>
 ada:	16 16       	cp	r1, r22
 adc:	17 06       	cpc	r1, r23
 ade:	18 06       	cpc	r1, r24
 ae0:	99 1f       	adc	r25, r25
 ae2:	f1 cf       	rjmp	.-30     	; 0xac6 <__fp_splitA+0xc>
 ae4:	86 95       	lsr	r24
 ae6:	71 05       	cpc	r23, r1
 ae8:	61 05       	cpc	r22, r1
 aea:	08 94       	sec
 aec:	08 95       	ret

00000aee <__fp_trunc>:
 aee:	0e 94 5d 05 	call	0xaba	; 0xaba <__fp_splitA>
 af2:	a0 f0       	brcs	.+40     	; 0xb1c <__fp_trunc+0x2e>
 af4:	be e7       	ldi	r27, 0x7E	; 126
 af6:	b9 17       	cp	r27, r25
 af8:	88 f4       	brcc	.+34     	; 0xb1c <__fp_trunc+0x2e>
 afa:	bb 27       	eor	r27, r27
 afc:	9f 38       	cpi	r25, 0x8F	; 143
 afe:	60 f4       	brcc	.+24     	; 0xb18 <__fp_trunc+0x2a>
 b00:	16 16       	cp	r1, r22
 b02:	b1 1d       	adc	r27, r1
 b04:	67 2f       	mov	r22, r23
 b06:	78 2f       	mov	r23, r24
 b08:	88 27       	eor	r24, r24
 b0a:	98 5f       	subi	r25, 0xF8	; 248
 b0c:	f7 cf       	rjmp	.-18     	; 0xafc <__fp_trunc+0xe>
 b0e:	86 95       	lsr	r24
 b10:	77 95       	ror	r23
 b12:	67 95       	ror	r22
 b14:	b1 1d       	adc	r27, r1
 b16:	93 95       	inc	r25
 b18:	96 39       	cpi	r25, 0x96	; 150
 b1a:	c8 f3       	brcs	.-14     	; 0xb0e <__fp_trunc+0x20>
 b1c:	08 95       	ret

00000b1e <__fp_zero>:
 b1e:	e8 94       	clt

00000b20 <__fp_szero>:
 b20:	bb 27       	eor	r27, r27
 b22:	66 27       	eor	r22, r22
 b24:	77 27       	eor	r23, r23
 b26:	cb 01       	movw	r24, r22
 b28:	97 f9       	bld	r25, 7
 b2a:	08 95       	ret

00000b2c <_exit>:
 b2c:	f8 94       	cli

00000b2e <__stop_program>:
 b2e:	ff cf       	rjmp	.-2      	; 0xb2e <__stop_program>
